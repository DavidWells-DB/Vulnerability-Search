# Databricks notebook source
# MAGIC %md
# MAGIC 
# MAGIC ## Databricks CVE Search Dashboard
# MAGIC 
# MAGIC This dashboard is designed to help teams to quickly search a list of CVEs against the Databricks data plane to verify if Databricks is vulnerable to it.

# COMMAND ----------

# MAGIC %md
# MAGIC ### Jira Connectivity Details and Helper Methods

# COMMAND ----------

# MAGIC %pip install JIRA

# COMMAND ----------

# Jira Connection variables
from jira import JIRA
import json, re
host = "https://databricks.atlassian.net/"
uid = "david.wells@databricks.com"
pswd = dbutils.secrets.get(scope = "DavidW", key = "jira")

### Method to pull CVE data from ticket description details.
cve_pattern = r'CVE-\d{4}-\d{4,7}'
usn_pattern = r'USN-\d{3,5}-\d+'
rhel_pattern = r'RHSA-\d{4}:\d+'
centos_pattern = r'CESA-\d{4}:\d+'
def extract_cves(description):
  objects = []
#  if description: 
  cves = re.findall(cve_pattern, description)
  if cves:
    objects.extend(list(dict.fromkeys(cves)))
  usns = re.findall(usn_pattern, description)
  if usns: 
    objects.extend(list(dict.fromkeys(usns)))
  rhels = re.findall(rhel_pattern, description)
  if rhels: 
    objects.extend(list(dict.fromkeys(rhels)))
  centos = re.findall(centos_pattern, description)
  if centos: 
    objects.extend(list(dict.fromkeys(centos)))
  return objects


# COMMAND ----------

# MAGIC %md
# MAGIC ### Creates the connection object for Databrick's Jira environment

# COMMAND ----------

jira = JIRA(server=host, basic_auth=(uid, pswd), options = { 'rest_api_version': 2, 'headers': { 'Content-Type': 'application/json',  },})
# issues=jira.search_issues('project = patch AND ("AssetID[Short text]" ~ Control_Plane_Host OR "AssetID[Short text]" ~ Data_Plane_Host)',
#            startAt=0, maxResults=100)

# COMMAND ----------

import re
# print(get_issue_changelog("PATCH-62639").keys())
# print(json.dumps(get_issue_changelog("PATCH-62639")['values'], indent=4))

def get_issue_changelog(issue_id, print=False):
  url = f"https://databricks.atlassian.net/rest/api/3/issue/{issue_id}/changelog"
  #https://api.atlassian.com/ex/jira/:cloudId:/rest/api/3/user/bulk/migration
  response = requests.request("GET", url, headers=headers)
  if print:
    print(response.status_code)
    print(json.dumps(response.json(), indent=4))
  return response.json()

def get_issue(issue_id, print=False):
  url = f"https://databricks.atlassian.net/rest/api/3/issue/{issue_id}"
  #https://api.atlassian.com/ex/jira/:cloudId:/rest/api/3/user/bulk/migration
  response = requests.request("GET", url, headers=headers)
  if print:
    print(response.status_code)
    print(json.dumps(response.json(), indent=4))
  return response.json()

def format_list_of_dbr_versions(dbrs):
  returnValues = []
  for i in items:
        dbr = i.split(".x-")[0].split("-")[1]
        if dbr not in returnValues:
          returnValues.append(dbr)
  return returnValues

def get_all_dbrs_ever_impacted_for_patch_jira(id):
  returnValues = []
  for d in get_issue_changelog(id)['values']:
    if "dbr-" in json.dumps(d['items']):
      past_items = format_list_of_dbr_versions(re.findall('dbr-\d+[^ ,"]+', json.dumps(d['items'])))
      current_items = format_list_of_dbr_versions(json.dumps(get_issue("PATCH-62639")['fields']['labels']))[0:3]
      for i in range(0, len(past_items)):
        if past_items[i] not in current_items: 
          past_items[i] += " FIXED"
      return past_items
        
get_all_dbrs_ever_impacted_for_patch_jira("PATCH-62639")

# COMMAND ----------


