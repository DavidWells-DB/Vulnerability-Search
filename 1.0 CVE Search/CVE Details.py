# Databricks notebook source
# MAGIC %md
# MAGIC # CVE Details
# MAGIC ### This notebook matches all of the open CVEs and pulls the CVE details from the Ubuntu API

# COMMAND ----------

# DBTITLE 1,Create Vulnerability Details Tracker Table
# MAGIC %sql 
# MAGIC 
# MAGIC CREATE DATABASE IF NOT EXISTS Vulnerability;
# MAGIC USE Vulnerability;
# MAGIC 
# MAGIC --DROP TABLE IF EXISTS Vulnerability.CVEDetails;
# MAGIC CREATE TABLE IF NOT EXISTS Vulnerability.CVEDetails (
# MAGIC   CVE_ID STRING,
# MAGIC   CVSS3 STRING,
# MAGIC   PRIORITY STRING,
# MAGIC   DESCRIPTION STRING,
# MAGIC   NOTES STRING
# MAGIC ) using DELTA;
# MAGIC 
# MAGIC -- Debug --
# MAGIC --SELECT * FROM Vulnerability.CVEDetails
# MAGIC --DESCRIBE TABLE Vulnerability.CVEDetails

# COMMAND ----------

# DBTITLE 1,Create methods to ping the Ubuntu CVE Database
import requests, json

def GetVulnerabilityDetailsFromUbuntu(id):
  if id.lower().startswith("cve"):
    return GetCVEDetailsFromUbuntu(id)
  elif id.lower().startswith("usn"):
    return GetUSNDetailsFromUbuntu(id)
  else:
    #raise Exception(f"Invalid Vulnerability ID: {id}")
    return None

def GetCVEDetailsFromUbuntu(cve):
  response_API = requests.get(f'https://ubuntu.com/security/cves/{cve}.json?show_hidden=false')
  #print(response_API.text)
  return json.loads(response_API.text)
  #print(j["id"], j["priority"], j["description"], j["cvss3"], j["tags"])
  #print(list(j["tags"].keys()))
  
#https://ubuntu.com/security/notices/USN-5511-1.json
def GetUSNDetailsFromUbuntu(usn):
  response_API = requests.get(f'https://ubuntu.com/security/notices/{usn}.json?show_hidden=false')
  return json.loads(response_API.text)

# COMMAND ----------

# DBTITLE 1,Pull all of the unique CVEs and identify ones that don't have 
df = spark.sql("""
WITH ALL AS (WITH DBR AS (
  SELECT
    DISTINCT explode(dbrcves.cves) AS `CVE_ID`
  FROM
    hive_metastore.vulnerability.dbrcves
)
SELECT
  DBR.CVE_ID,
  CVEDetails.CVE_ID AS CVE_ID2
FROM
  DBR
  LEFT JOIN Vulnerability.CVEDetails ON DBR.CVE_ID = CVEDetails.`CVE_ID`
WHERE
  CVEDetails.CVE_ID IS NULL
UNION
  (
    WITH INF AS (
      SELECT
        DISTINCT explode(infrastructurecves.cves) AS `CVE_ID`
      FROM
        hive_metastore.vulnerability.infrastructurecves
    )
    SELECT
      INF.CVE_ID,
      CVEDetails.CVE_ID AS CVE_ID2
    FROM
      INF
      LEFT JOIN Vulnerability.CVEDetails ON INF.CVE_ID = CVEDetails.`CVE_ID`
    WHERE
      CVEDetails.CVE_ID IS NULL
  )) SELECT DISTINCT ALL.CVE_ID FROM ALL
""")

#display(df.count())

# COMMAND ----------

# DBTITLE 1,Cycle through each untagged CVE and pull the Ubuntu server
from pyspark.sql.functions import *
from pyspark.sql.types import *
import time

CVEDetails = spark.table("Vulnerability.CVEDetails")
cveSchema = StructType([
  StructField("CVE_ID", StringType(), True),
  StructField("PRIORITY", StringType(), True),
  StructField("CVSS3", StringType(), True),
  StructField("DESCRIPTION", StringType(), True),
  StructField("NOTES", StringType(), True)
])

data = []

#Debug
debug = False
count = 0
breakNo = 100

for row in df.collect():
  vulnID = row["CVE_ID"]
  vulnDetails = GetVulnerabilityDetailsFromUbuntu(vulnID)

  if (not isinstance(vulnDetails, dict)) or (vulnDetails is None): continue
  #print(vulnDetails)
  priority = "Unknown"
  description = ""
  notes = ""
  cvss3 = ""
  
  #Check if CVSS3 exists and add to variable
  if "cvss3" in vulnDetails:
    cvss3 = vulnDetails["cvss3"]
  
  #Check if description exists and add to variable
  if "description" in vulnDetails:
    description = vulnDetails["description"]
  
  #Check if notes exists and add to variable
  if "notes" in vulnDetails and (len(vulnDetails["notes"]) > 0) and "note" in vulnDetails["notes"][0]:
    notes = vulnDetails["notes"][0]["note"]

  #Check if priority exists, otherwise check if it exists in a CVE report
  #Note Some USNs don't have a priority or CVEs attached to them, so they'll be "Unknown by default"
  if "priority" in vulnDetails:
    priority = vulnDetails["priority"] if vulnDetails["priority"] is not None else "Not Applicable"
  elif ("cves" in vulnDetails) and (len(vulnDetails["cves"]) > 0) and "priority" in vulnDetails["cves"][0]: 
    #I'm only taking the first CVE priority for an Ubuntu vulnerability anouncement
    priority = vulnDetails["cves"][0]["priority"]
  
  data.append([vulnID, priority, cvss3, vulnDetails, notes])
  
  count += 1
  if debug and (count == breakNo): break

#mergedTable = CVEDetails.unionByName(newData)
#mergedTable.write.saveAsTable('CVEDetails', mode='append')


# COMMAND ----------

# DBTITLE 1,Append the new CVE details to the table
newData = spark.createDataFrame(data, cveSchema)
if newData.count() > 0: newData.write.saveAsTable('CVEDetails', mode='append')

# COMMAND ----------

# MAGIC %sql
# MAGIC --SELECT * FROM Vulnerability.CVEDetails
# MAGIC --SELECT * FROM Vulnerability.CVEDetails WHERE PRIORITY is NULL OR PRIORITY = "Not Applicable"
# MAGIC --SELECT DISTINCT COUNT(*) FROM Vulnerability.CVEDetails;
# MAGIC --SELECT CVE_ID, count(*) as NUM FROM Vulnerability.CVEDetails GROUP BY CVE_ID
