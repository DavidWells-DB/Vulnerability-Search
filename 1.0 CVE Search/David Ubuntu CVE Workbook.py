# Databricks notebook source
# MAGIC %md
# MAGIC # Ubuntu CVE Scan
# MAGIC ### This notebook attaches to a cluster, runs the CVE scan, cleans the data, and adds/updates the Ubuntu CVE Scan table.

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ### Ubuntu's CVE Scan
# MAGIC 
# MAGIC *This cell pulls the Ubuntu CVE scan application from github and runs it on the DBR container. It saves the results to the DBFS tmp folder for the notebook to import to the Ubuntu CVE table.*

# COMMAND ----------

# MAGIC %sh
# MAGIC sudo apt install python3-apt python3-pip -y
# MAGIC if [[ ! -f /usr/lib/python3/dist-packages/apt_pkg.so ]]
# MAGIC then
# MAGIC   ln -s /usr/lib/python3/dist-packages/apt_pkg.cpython-*-x86_64-linux-gnu.so /usr/lib/python3/dist-packages/apt_pkg.so
# MAGIC fi
# MAGIC if [[ -z "${HOME}" ]]; then
# MAGIC   export HOME="/root"
# MAGIC fi
# MAGIC cd /root
# MAGIC git clone https://github.com/canonical/sec-cvescan
# MAGIC sudo pip3 install --user sec-cvescan/
# MAGIC shorthostname=CVEScan-$(hostname | sed -r 's/-[0-9]+-[0-9]+-[0-9]+-[0-9]+$//')-$(date '+%Y-%m-%d').csv
# MAGIC ~/.local/bin/cvescan --csv --unresolved --show-links -p all > /dbfs/tmp/$(echo $shorthostname) &

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ### Verify the Ubuntu CVE Database and Table Exists
# MAGIC 
# MAGIC *If the Vulnerability database OR the Ubuntu CVE table doesn't exist, then create them*

# COMMAND ----------

# MAGIC %sql 
# MAGIC 
# MAGIC CREATE DATABASE IF NOT EXISTS Vulnerability;
# MAGIC USE Vulnerability;
# MAGIC 
# MAGIC -- DROP TABLE IF EXISTS Vulnerability.UbuntuCVEList;
# MAGIC CREATE TABLE IF NOT EXISTS Vulnerability.UbuntuCVEList (
# MAGIC   CVE_ID STRING,
# MAGIC   PRIORITY STRING,
# MAGIC   DBR_VERSION STRING,
# MAGIC   LAST_SEEN DATE,
# MAGIC   PACKAGE ARRAY<STRING>,
# MAGIC   REPOSITORY ARRAY<STRING>,
# MAGIC   FIXED_VERSION ARRAY<STRING>,
# MAGIC   URL string
# MAGIC ) using DELTA;
# MAGIC 
# MAGIC -- Debug --
# MAGIC --SELECT * FROM Vulnerability.UbuntuCVE
# MAGIC --DESCRIBE TABLE UbuntuCVE

# COMMAND ----------

# MAGIC %md
# MAGIC ### Read the CVE Scan output and save to a DataFrame
# MAGIC 
# MAGIC *This cell reads the CVE Scan file from the tmp directory, adds/updates the columns as needed, and saves the findings as a DataFrame*

# COMMAND ----------

import os, time, datetime
from pyspark.sql import *
from pyspark.sql.functions import lit, col, struct, asc, to_date, date_format, concat, collect_list, collect_set, first, col, from_json, current_date
from pyspark.sql.types import ArrayType, StructType, StructField, DateType, IntegerType, LongType, StringType, FloatType

#Debug output helper variable
debug = False

#Get the name of the file for this cluster
filename = os.popen("echo CVEScan-$(hostname | sed -r 's/-[0-9]+-[0-9]+-[0-9]+-[0-9]+$//')-$(date '+%Y-%m-%d').csv").read().rstrip()
#os.popen("sed -r 's/CVE ID/CVE_ID/' /dbfs/tmp/$(echo $shorthostname) > /dbfs/tmp/$(echo $shorthostname)")
dbrVersion = spark.conf.get("spark.databricks.clusterUsageTags.sparkVersion").split("-")[0]

#Open the file
UbuntuCSV = spark.read.format('csv').options(header='true', inferSchema='true').load('/tmp/'+filename)

#Rename 'CVE ID' to 'CVE_ID' to match overall format 
UbuntuCSV = UbuntuCSV.withColumnRenamed("CVE ID", "CVE_ID")
UbuntuCSV = UbuntuCSV.drop_duplicates(subset=['CVE_ID', 'PACKAGE'])

#Merge together the packages into a single CVE
UbuntuCSV = UbuntuCSV.select("CVE_ID", "PRIORITY", "PACKAGE", "FIXED_VERSION", "REPOSITORY", "URL").groupby("CVE_ID").agg(first("PRIORITY").alias("PRIORITY"), collect_set( "PACKAGE").alias("PACKAGE"), collect_set("FIXED_VERSION").alias("FIXED_VERSION"), collect_set("REPOSITORY").alias("REPOSITORY"), first("URL").alias("URL"))

#Add required columns to track when a vulnerability was seen on a DBR
UbuntuCSV = UbuntuCSV.withColumn('DBR_VERSION', lit(dbrVersion))
UbuntuCSV = UbuntuCSV.withColumn('LAST_SEEN', current_date())

#This table should never exist but just in case drop it before recreating
spark.sql("DROP TABLE IF EXISTS Vulnerability.tmp_Ubuntu_Daily_CVE")
UbuntuCSV.write.format("delta").saveAsTable("tmp_Ubuntu_Daily_CVE")

if debug : display(UbuntuCSV)

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ### Save DataFrame to Table
# MAGIC 
# MAGIC *Save the Ubuntu CVE DataFrame to the UbuntuCVEs table*

# COMMAND ----------

# MAGIC %sql 
# MAGIC 
# MAGIC MERGE INTO UbuntuCVEList AS uc 
# MAGIC USING tmp_Ubuntu_Daily_CVE AS tuc 
# MAGIC ON uc.CVE_ID = tuc.CVE_ID AND uc.DBR_VERSION = tuc.DBR_VERSION
# MAGIC WHEN MATCHED THEN
# MAGIC UPDATE SET
# MAGIC   --CVE_ID = uc.CVE_ID,
# MAGIC   PRIORITY = tuc.PRIORITY,
# MAGIC   --DBR_VERSION = uc.DBR_VERSION,
# MAGIC   LAST_SEEN = tuc.LAST_SEEN,
# MAGIC   PACKAGE = tuc.PACKAGE,
# MAGIC   REPOSITORY = tuc.REPOSITORY,
# MAGIC   FIXED_VERSION = tuc.FIXED_VERSION --URL string
# MAGIC   WHEN NOT MATCHED THEN
# MAGIC INSERT
# MAGIC   (
# MAGIC     CVE_ID,
# MAGIC     PRIORITY,
# MAGIC     DBR_VERSION,
# MAGIC     LAST_SEEN,
# MAGIC     PACKAGE,
# MAGIC     REPOSITORY,
# MAGIC     FIXED_VERSION,
# MAGIC     URL
# MAGIC   )
# MAGIC VALUES
# MAGIC   (
# MAGIC     tuc.CVE_ID,
# MAGIC     tuc.PRIORITY,
# MAGIC     tuc.DBR_VERSION,
# MAGIC     tuc.LAST_SEEN,
# MAGIC     tuc.PACKAGE,
# MAGIC     tuc.REPOSITORY,
# MAGIC     tuc.FIXED_VERSION,
# MAGIC     tuc.URL
# MAGIC   )

# COMMAND ----------

#Cleanup
spark.sql("DROP TABLE IF EXISTS Vulnerability.tmp_Ubuntu_Daily_CVE")
dbutils.fs.rm('/tmp/'+filename)
